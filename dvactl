#!/usr/bin/env python
import argparse
import os
import json
import random
from deploy import compose, kube

try:
    import requests
except ImportError:
    print "Warning! requests module is required to use exec functionality."


def get_mode():
    if not os.path.isfile("mode.json"):
        return configure()
    return json.load(file("mode.json"))


def configure_kube():
    config_template = {
        "dbusername": "pguser",
        "dbpassword": "pgpass",
        "rabbithost": "rbbit",
        "rabbitusername": "rabbituser",
        "rabbitpassword": "rabbitpass",
        "awskey": "none",
        "awssecret": "none",
        "mediabucket": "dvamedia_{random_string}",
        "secretkey": "{random_string}",
        "superuser": "admin",
        "superpass": "please_change_this",
        "superemail": "admin@test.com",
        "cloudfsprefix": "gs",
        "cors_origin": "*",
        "redishost": "redis-master",
        "redispassword": "1234567890",
        "zone": "us-west1-b",
        "cluster_name": "dvacluster",
        "machine_type": "custom-22-84480",
        "nodes": 1,
        "branch": "stable"
    }
    config = {}
    print "Creating configuration for kubernetes from kubeconfig.example.json"
    if os.path.isfile('kubeconfig.json'):
        config_template = json.load(file('kubeconfig.json'))
    for k, v in sorted(config_template.items()):
        if "{random_string}" in v:
            v = v.format(random_string=random.randint(0, 10000000))
        new_value = raw_input(
            "Enter value for {} (Current value is '{}' press enter to keep current value) >>".format(k, v))
        if new_value.strip():
            if type(v) is int:
                config[k] = int(new_value)
            else:
                config[k] = new_value
        else:
            config[k] = v
    with open('kubeconfig.json', 'w') as fout:
        json.dump(config, fout, indent=4)
    print "Save kubeconfig.json"


def configure(mode=None):
    gpu_count = 0
    init_process = '/root/DVA/configs/custom_defaults/init_process.json'
    init_models = '/root/DVA/configs/custom_defaults/trained_models.json'
    if mode is None or not mode:
        mode = raw_input("Please select mode { dev, test, cpu, gpu, kube } >>").strip()
    if mode not in {'dev', 'test', 'cpu', 'gpu', 'kube'}:
        raise ValueError("{} is not a valid mode".format(mode))
    if mode == 'kube':
        configure_kube()
    else:
        process = raw_input("Please specify init process or press enter to keep default"
                            " ( /root/DVA/configs/custom_defaults/init_process.json ) >>").strip()
        if process.strip():
            init_process = process
        models = raw_input("Please specify default models or press enter to keep default"
                           " ( /root/DVA/configs/custom_defaults/trained_models.json ) >>").strip()
        if process.strip():
            init_models = models
        if mode == 'gpu':
            gpu_count = int(raw_input("Please select number of GPUs >>").strip())
    with open("mode.json", 'w') as f:
        mode_dict = {"mode": mode, 'gpus': gpu_count, 'init_process': init_process, 'init_models': init_models}
        json.dump(mode_dict, f)
    return {"mode": mode, 'gpus': gpu_count, 'init_process': init_process, 'init_models': init_models}


def exec_script(script_path):
    creds = json.load(file('creds.json'))
    server, token = creds['server'], creds['token']
    headers = {'Authorization': 'Token {}'.format(token)}
    r = requests.post("{server}queries/".format(server=server), data={'script': file(script_path).read()},
                      headers=headers)
    r.raise_for_status()
    if r.ok:
        print r.json()


if __name__ == '__main__':
    help_text = """
    Available options
    ./dvactl configure   
    ./dvactl create      
    ./dvactl start 
    ./dvactl auth  # recreates creds.json  
    ./dvactl exec -f script.json  # run process using creds.json and REST API
    ./dvactl stop 
    ./dvactl clean 
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("action",
                        help="Select action out of { configure | create | start | auth | exec | stop | clean "
                             "| clean_restart ")
    parser.add_argument("-f", help="path to script to exec, e.g. process_livestream.json",
                        default="")
    args = parser.parse_args()
    if args.action == 'configure':
        configure()
    elif args.action == 'exec':
        if args.f.strip():
            exec_script(args.f)
        else:
            raise ValueError("Please specify script path e.g. ./dvactl exec -f test.json")
    else:
        mode_dict = get_mode()
        if mode_dict['mode'] == 'kube':
            kube.handle_kube_operations(args)
        else:
            if args.action == 'create':
                raise ValueError("create  is not required for compose, its used in kube mdoe to create GKE cluster")
            compose.handle_compose_operations(args, mode_dict['mode'], mode_dict['gpus'],
                                              mode_dict['init_process'], mode_dict['init_models'])
